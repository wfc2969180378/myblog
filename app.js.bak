/*
 *应用程序的启动入口文件
 */

// 加载express模块
let express = require('express');
// 加载模板处理模块
let swig = require('swig')
// 记载数据库模块
let mongoose = require('mongoose');
// 加载bopdy-parser，用来处理post提交过来的数据
let bodyParser = require('body-parser');
// 加载cookies模块
let Cookies = require('cookies');

// 创建app应用 => NodeJS Http.createServer();
let app = express();

// 配置静态文件托管
// 当用户访问的url以/public开始，那么直接返回对应__dirname + '/public'
app.use( '/public', express.static( __dirname + '/public') );

// 配置应用模板
// 定义当前应用所使用的模板引擎
// 第一个参数表示模板引擎的名称，同时也是模板文件的后缀，
// 第二个参数表示用于解析处理模板内容的方法
app.engine('html', swig.renderFile);
// 设置模板文件存放的目录，第一个参数必须是views，第二个参数是目录
app.set('views', './views');
// 注册所使用的模板引擎，
// 第一个参数必须是 view engine，
// 第二个参数和app.engine这个方法中定义的模板引擎的名称一致
app.set('view engine', 'html');
// 在开发过程中，需要取消模板缓存
swig.setDefaults({cache: false});

// bodyparser设置
app.use( bodyParser.urlencoded({extended: true}) )

// 设置cookie
app.use( (req, res, next) => {
    req.cookie = new Cookies( req, res);
    next();
} );

/*
* 根据不同的功能划分模块
* */
app.use('/admin', require('./routers/admin'));
app.use('/api', require('./routers/api'));
app.use('/', require('./routers/main'));



// 监听http请求
mongoose.connect('mongodb://localhost:27018/myblog', (err) => {
    if (err) {
        console.log('数据库连接失败');
    } else {
        console.log('数据库连接成功');
        app.listen(8081);
    }
});


// 用户发送http请求 -> url -> 解析路由 -> 找到匹配的规则 -> 执行指定绑定函数，返回对应内容至用户
// /public -> 静态 -> 直接读取指定目录下的文件，返回给用户
// 动态 -> 处理业务逻辑，加载模板，解析模板 -> 返回数据给用户
